# Functional test that will check if anything affecting guest ABI changes
#
# Copyright (c) 2018 Red Hat, Inc.
#
# Author:
#  Eduardo Habkost <ehabkost@redhat.com>
#
# This work is licensed under the terms of the GNU GPL, version 2 or
# later.  See the COPYING file in the top-level directory.

import logging
import os.path
from pathlib import Path

from avocado_qemu import Test

MY_DIR = Path(os.path.dirname(__file__))

#TODO: how do we know what's the build dir?
#      Assume the test will run from the root of the build dir, by now.
BUILD_DIR = Path('.')
TEST_BUILD_DIR = BUILD_DIR / 'tests/acceptance'

SKIP_MACHINES = {'none', 'xenfv', 'xenpv'}

class GuestABITest(Test):
    """Base class for Guest ABI test cases
    :avocado: enable
    """
    #TODO: check memory maps
    #TODO: check CPU QOM properties
    #TODO: run CPUID kernel
    #TODO: check device tree
    #TODO: check vmstate sections
    #TODO: SMBIOS
    #TODO: BIOS tables?

    def pre_vm_launch(self, vm):
        """Called before launching the VM

        Can be used to add extra args to the QEMu command-line,
        or to cancel the test case before the VM is launched.
        """
        pass

    def extra_cpu_options(self):
        return ''

    def setUp(self):
        super().setUp()
        self.accel = self.params.get('accel', default='kvm')
        self.vm.add_args('-accel', self.accel)

        self.machine = self.params.get('machine')
        self.cpu = self.params.get('cpu')

        if self.machine in SKIP_MACHINES:
            self.cancel("Unsupported machine-type")

        if self.machine:
            self.vm.set_machine(self.machine)

        if self.cpu:
            cpu_opt = self.cpu
            extra_opts = self.extra_cpu_options()
            if extra_opts:
                cpu_opt += ',' + extra_opts
            self.vm.add_args('-cpu', cpu_opt)

        self.pre_vm_launch(self.vm)
        self.vm.launch()

        self.machine = self.detect_machine_name()
        self.cpu = self.detect_cpu_model()

    def detect_machine_name(self):
        # type: () -> Optional[str]
        """Returns actual machine type being used"""
        if self.machine:
            #TODO: return full name if self.machine is an alias like "pc" or "q35"
            return self.machine

        default_machine = [m['name'] for m in self.vm.command('query-machines') if m.get('is-default')]
        if not default_machine:
            self.cancel('No default machine-type found')

        return default_machine[0]

    def detect_cpu_model(self):
        """Returns actual CPU model being run"""
        # If the CPU model is explicitly configured, this is trivial:
        if self.cpu:
            return self.cpu

        # If the CPU model name is omitted, try to find out using
        # the data QEMU provides via QMP:
        cpu_path = self.vm.command('query-cpus')[0].get('qom_path')
        if not cpu_path:
            self.cancel("No QOM path info on query-cpus")

        # The QOM object gives us the QOM type name, but we need
        # to find the CPU model name that corresponds to the QOM
        # type name:
        cpu_type = self.vm.command('qom-get', path=cpu_path, property='type')
        cpu_defs = self.vm.command('query-cpu-definitions')
        cpu_model = [c['name'] for c in cpu_defs if c.get('typename') == cpu_type]
        if not cpu_model:
            self.cancel("Can't find the CPU model name")

        return cpu_model[0]

    def data_dir(self):
        """Return path for data directory for this test case

        Files will be stored at `guest_abi.data/<machine>/<cpu>`.
        """
        return MY_DIR / 'guest_abi.data' / self.machine / self.cpu

    def data_file_path(self, filename):
        """Return path for data file

        We could be using Avocado's `TestCase.get_data()` for
        this, but the filenames generated by Avocado are just
        hashes of the variant parameters, making the file path
        less obvious for people looking at the data directory.
        """
        return self.data_dir() / filename

    def assert_equals_file(self, data, filename, mode='t'):
        """Check if `data` matches contents of `filename`

        :param mode: File mode for `open()`` ('t' or 'b')
        """
        #TODO: figure out how to use test parameters instead of env var
        update_data = os.getenv('GUEST_ABI_REFRESH')
        fpath = self.data_file_path(filename)
        if update_data:
            self.log.info('Will update reference file %s', fpath)
            os.makedirs(os.path.dirname(fpath), exist_ok=True)
            with open(fpath, 'w'+mode) as f:
                f.write(data)

        if not fpath.exists():
            self.cancel("No reference file at %s" % (fpath))

        ref = open(fpath, 'r'+mode).read()
        self.assertEqual(ref, data,
                         "data doesn't match reference file %s" % (fpath))

    def hmp(self, cmd):
        """Run HMP command

        Return HMP command output

        DOS newlines (\r\n) will be converted to Unix newlines (\n) to
        ensure we always save data using Unix newlines on reference data
        files.
        """
        output = self.vm.command("human-monitor-command",
                                 command_line=cmd)

        # human-monitor-command returns "\r\n" newlines, get rid of them
        # so the reference files will always use Unix newlines
        return output.replace('\r\n', '\n')


class CPUIDGuestABI(GuestABITest):
    """
    :avocado: enable
    """
    def extra_cpu_options(self):
        # this will allow us to test all CPU models, even the ones that
        # don't run on this host
        return 'x-force-features=on,check=off'

    def pre_vm_launch(self, vm):
        test_kernel = TEST_BUILD_DIR / 'cpuid-dump-kernel/cpuid_dump_kernel.bin'

        # don't boot kernel until we're ready (otherwise QEMU will quit too soon)
        vm.add_args('-S')
        vm.add_args('-device', 'isa-debug-exit')
        vm.add_args('-kernel', str(test_kernel))
        self.serial_out = Path(self.teststmpdir) / 'serial.out'
        vm.add_args('-serial', 'file:%s' % (str(self.serial_out)))

    def test_cpuid(self):
        # the cpuid dump kernel should shut down the VM automatically
        self.vm.command('cont')
        self.vm.wait()

        cpuid_dump = open(self.serial_out, 'r').read()
        self.assert_equals_file(cpuid_dump, 'cpuid-dump.txt')
